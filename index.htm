<!DOCTYPE html>
<html lang="en">
	<head>
		<title>three.js canvas - geometry - cube</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		<style>
			body {
				font-family: Monospace;
				background-color: #f0f0f0;
				margin: 0px;
				overflow: hidden;
				background: transparent url(http://www.hdwallpapers.in/walls/boat_sea_beach-normal.jpg) center center no-repeat;
				background-size:cover;
			}
			
			#console {
				position: absolute;
				right: 10px;
				top: 10px;
				min-width: 20em;
				min-height: 3em;
				background-color: #000;
				color: #ddd;
			}
		</style>
	</head>
	<body>

		<script src="js/three.min.js"></script>

		<script src="js/stats.min.js"></script>
		<script src="js/Detector.js"></script>
		<div id="console">
			<div>ROT X: <span id="targetRotationX"></span></div>
			<div>ROT Y: <span id="targetRotationY"></span></div>
		</div>
		<div id="container"></div>
		<script>
			var containerWidth = window.innerWidth, containerHeight = window.innerHeight;

		    var container, stats;

		    var camera, scene, renderer;

		    var cube;

		    var targetRotationY = 0, targetRotationX = 0;
		    var targetRotationYOnMouseDown = 0, targetRotationXOnMouseDown = 0;
		    var dragged = false;

		    var mouseX = 0;
		    var mouseXOnMouseDown = 0;

		    var windowHalfX = window.innerWidth / 2;
		    var windowHalfY = window.innerHeight / 2;
			var geometry
			
		    init([2, 10, 2]);
		    animate();

		    function init(texelization) {

		        container = document.getElementById('container');
			container.style.width = containerWidth + 'px';
			container.style.height = containerHeight + 'px';
			container.style.position = 'relative';
		        document.body.appendChild(container);

		        var info = document.createElement('div');
		        info.style.position = 'absolute';
		        info.style.top = '10px';
		        info.style.width = '100%';
		        info.style.textAlign = 'center';
		        info.innerHTML = 'Drag to spin the pack';
		        container.appendChild(info);
			
		        camera = new THREE.PerspectiveCamera(45, containerWidth / containerHeight, 1, 1000);
		        camera.position.y = 150;
		        camera.position.z = 400;

		        scene = new THREE.Scene();

		        // Cube

		        geometry = new THREE.CubeGeometry(150, 150, 150);
			
		        var materials = [];
		        for (var i = 0, a=0; i < geometry.faces.length; i += 2, a++) {

		            var hex = Math.random() * 0xffffff;
		            geometry.faces[i].color.setHex(hex);
		            geometry.faces[i + 1].color.setHex(hex);
		            var img = new Image();
		            img.src = 'http://www.psdgraphics.com/file/red-number-' + (a + 1) + '.jpg';
		            var tex = new THREE.Texture(img);
		            img.tex = tex;
		            img.onload = function () {
		                this.tex.needsUpdate = true;
		            };
		            var mat = new THREE.MeshLambertMaterial({ color: 0x000000, map:tex });
		            materials.push(mat);
		        }

		        // material
		        var material = new THREE.MeshFaceMaterial(materials);

		        cube = new THREE.Mesh(geometry, material);
		        cube.position.y = 150;
		        scene.add(cube);

			
		        renderer = Detector.webgl? new THREE.WebGLRenderer(): new THREE.CanvasRenderer();
		        renderer.setSize(containerWidth, containerHeight);

		        container.appendChild(renderer.domElement);

		        document.addEventListener('mousedown', onDocumentMouseDown, false);
		        document.addEventListener('touchstart', onDocumentTouchStart, false);
		        document.addEventListener('touchmove', onDocumentTouchMove, false);

		        window.addEventListener('resize', onWindowResize, false);

		    }

		    function onWindowResize() {

		        windowHalfX = window.innerWidth / 2;
		        windowHalfY = window.innerHeight / 2;

		        camera.aspect = window.innerWidth / window.innerHeight;
		        camera.updateProjectionMatrix();

		        renderer.setSize(window.innerWidth, window.innerHeight);

		    }

		    //

		    function onDocumentMouseDown(event) {

		        event.preventDefault();

		        document.addEventListener('mousemove', onDocumentMouseMove, false);
		        document.addEventListener('mouseup', onDocumentMouseUp, false);
		        document.addEventListener('mouseout', onDocumentMouseOut, false);

		        mouseXOnMouseDown = event.clientX - windowHalfX;
		        targetRotationYOnMouseDown = targetRotationY;
		        mouseYOnMouseDown = event.clientY - windowHalfY;
		        targetRotationXOnMouseDown = targetRotationX;
			dragged = true;
		    }

		    function onDocumentMouseMove(event) {
			dragged = true;
		        mouseX = event.clientX - windowHalfX;
		        mouseY = event.clientY - windowHalfY;
		        targetRotationY = targetRotationYOnMouseDown + (mouseX - mouseXOnMouseDown) * 0.02;
		        targetRotationX = targetRotationXOnMouseDown + (mouseY - mouseYOnMouseDown) * 0.02;
		    }

		    function onDocumentMouseUp(event) {

		        document.removeEventListener('mousemove', onDocumentMouseMove, false);
		        document.removeEventListener('mouseup', onDocumentMouseUp, false);
		        document.removeEventListener('mouseout', onDocumentMouseOut, false);
			dragged = false;
		    }

		    function onDocumentMouseOut(event) {

		        document.removeEventListener('mousemove', onDocumentMouseMove, false);
		        document.removeEventListener('mouseup', onDocumentMouseUp, false);
		        document.removeEventListener('mouseout', onDocumentMouseOut, false);
		    }

		    function onDocumentTouchStart(event) {

		        if (event.touches.length === 1) {

		            event.preventDefault();

		            mouseXOnMouseDown = event.touches[0].pageX - windowHalfX;
		            targetRotationYOnMouseDown = targetRotationY;
		            mouseYOnMouseDown = event.touches[0].pageY - windowHalfY;
		            targetRotationXOnMouseDown = targetRotationX;
		        }

		    }

		    function onDocumentTouchMove(event) {

		        if (event.touches.length === 1) {

		            event.preventDefault();

		            mouseX = event.touches[0].pageX - windowHalfX;
		            targetRotationY = targetRotationYOnMouseDown + (mouseX - mouseXOnMouseDown) * 0.05;
		            mouseY = event.touches[0].pageY - windowHalfY;
		            targetRotationX = targetRotationXOnMouseDown + (mouseY - mouseYOnMouseDown) * 0.05;
		        }

		    }

		    function animate() {
		        requestAnimationFrame(animate);
		        render();
		    }

		    function render() {
			if( dragged) {
				cube.rotation.y += (targetRotationY - cube.rotation.y) * 0.05;
				cube.rotation.x += (targetRotationX - cube.rotation.x) * 0.05;
			} else {
				if (Math.abs((targetRotationY - cube.rotation.y) * 0.05) > 0.015){
					cube.rotation.y += (targetRotationY - cube.rotation.y) * 0.05;
				} else {
					cube.rotation.y += 0.015;
					targetRotationY = cube.rotation.y;
				
				}
				if (cube.rotation.x > 0.35) {
					cube.rotation.x -= 0.015;
				} else if (cube.rotation.x < 0.25) {
					cube.rotation.x += 0.015;
				} else {
					cube.rotation.x = 0.3;
				}
			}
			
			var radiansConv = 180 / Math.PI;
			var rotationXDegrees = Math.abs((cube.rotation.x * radiansConv) % 360);
			var rotationYDegrees = Math.abs((cube.rotation.y * radiansConv) % 360);
			document.getElementById('targetRotationX').innerHTML = rotationXDegrees;
			document.getElementById('targetRotationY').innerHTML = rotationYDegrees;
			
			if (rotationYDegrees > 0 && rotationYDegrees < 45 || rotationYDegrees > 315 && rotationYDegrees < 360) {
				document.body.style.backgroundImage = "url(http://www.hdwallpapers.in/walls/boat_sea_beach-normal.jpg)";
			} else {
				document.body.style.backgroundImage = "url(http://crownrights.org/wp-content/uploads/2012/08/mars.jpg)";
			}
		        renderer.render(scene, camera);
		    }

		</script>

	</body>
</html>
